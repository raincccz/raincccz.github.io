<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Raincccz Blog</title>
  
  
  <link href="https://raincccz.github.io/atom.xml" rel="self"/>
  
  <link href="https://raincccz.github.io/"/>
  <updated>2021-02-01T14:49:26.787Z</updated>
  <id>https://raincccz.github.io/</id>
  
  <author>
    <name>Raincccz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>信号与系统拾遗</title>
    <link href="https://raincccz.github.io/2021-02-01-%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%8B%BE%E9%81%97/"/>
    <id>https://raincccz.github.io/2021-02-01-%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%8B%BE%E9%81%97/</id>
    <published>2021-01-31T16:00:00.000Z</published>
    <updated>2021-02-01T14:49:26.787Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/cover/sunset-5928907_1920.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/cover/sunset-5928907_1920.jpg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="信号与系统" scheme="https://raincccz.github.io/tags/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>github-actions测试</title>
    <link href="https://raincccz.github.io/2021-01-30-github-actions%E6%B5%8B%E8%AF%95/"/>
    <id>https://raincccz.github.io/2021-01-30-github-actions%E6%B5%8B%E8%AF%95/</id>
    <published>2021-01-30T15:32:47.000Z</published>
    <updated>2021-02-01T14:49:26.779Z</updated>
    
    <content type="html"><![CDATA[<p>测试github actions</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试github actions&lt;/p&gt;
</summary>
      
    
    
    
    <category term="测试" scheme="https://raincccz.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Visual Studio的一些设置</title>
    <link href="https://raincccz.github.io/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/"/>
    <id>https://raincccz.github.io/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-01-30T07:30:32.000Z</published>
    <updated>2021-02-01T14:49:26.767Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍一些VS中的常用功能及常用设置</p><a id="more"></a><h1 id="vs解决方案、项目"><a href="#vs解决方案、项目" class="headerlink" title="vs解决方案、项目"></a>vs解决方案、项目</h1><blockquote><p><a href="https://docs.microsoft.com/zh-cn/visualstudio/ide/solutions-and-projects-in-visual-studio?view=vs-2019">https://docs.microsoft.com/zh-cn/visualstudio/ide/solutions-and-projects-in-visual-studio?view=vs-2019</a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>项目包含在解决方案中。 尽管其名称如此，但解决方案并不是“答案”。 解决方案只是一个容器，用于包含一个或多个相关项目，以及生成信息、Visual Studio 窗口设置和不与特定项目关联的任何杂项文件。</p></blockquote><p>项目相当于工程文件夹</p><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>解决方案配置管理器</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130172825227.png" alt="image-20210130172825227"></p><p>项目配置</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130172951604.png" alt="image-20210130172951604"></p><h2 id="头文件、库文件配置"><a href="#头文件、库文件配置" class="headerlink" title="头文件、库文件配置"></a>头文件、库文件配置</h2><p>设置头文明、库文件位置</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130173017878.png" alt="image-20210130173017878"></p><p>附加包含目录（位于C/C++ -&gt;常规，C/C++选项用于修改编译器设置）</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130173231185.png" alt="image-20210130173231185"></p><p>附加库目录（位于链接器 -&gt;常规，用于修改链接器设置)</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130173258572.png" alt="image-20210130173258572"></p><p>注：VC++目录设置曾经是VS的全局设置，现在变为了单个项目的设置。附加包含目录设置作用于编译器参数，附加库目录作用于链接器参数。VC++目录影响当前项目的环境变量。在使用上。两者区别不大。</p><p>添加附加依赖项，用于添加lib文件。</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130173100543.png" alt="image-20210130173100543"></p><h2 id="环境变量、预处理器设置"><a href="#环境变量、预处理器设置" class="headerlink" title="环境变量、预处理器设置"></a>环境变量、预处理器设置</h2><p>调试-&gt;环境，可以仅修改当前项目的环境变量，仅在当前项目中生效</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130173612479.png" alt="image-20210130173612479"></p><p>预处理器定义，对当前项目的所有文件均生效</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130173727387.png" alt="image-20210130173727387"></p><p>命令行，编译器的额外选项</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130173828496.png" alt="image-20210130173828496"></p><h2 id="子系统选项"><a href="#子系统选项" class="headerlink" title="子系统选项"></a>子系统选项</h2><p>子系统选项，在qt GUI编程时，设置为控制台，调试信息可以输出到控制台窗口。设置为窗口，将不显示控制台。</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130173949513.png" alt="image-20210130173949513"></p><h2 id="属性管理器"><a href="#属性管理器" class="headerlink" title="属性管理器"></a>属性管理器</h2><p>视图-&gt;其他窗口-&gt;属性管理器</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130174114747.png" alt="image-20210130174114747"></p><p>当你需要配置环境时，可以通过项目属性表的方式配置，项目属性表可以被添加到多个项目中。（Release和Debug分开设置）</p><h1 id="vs中的快捷键"><a href="#vs中的快捷键" class="headerlink" title="vs中的快捷键"></a>vs中的快捷键</h1><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130174642581.png" alt="image-20210130174642581"></p><p>可以在点击菜单栏中的按键，也可以使用相应的快捷键。</p><p>高级，用来设置文本格式</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130174605336.png" alt="image-20210130174605336"></p><p>高级，修改文本格式常用快捷键：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;C-K&gt;+&lt;C-C&gt;注释</span><br><span class="line">&lt;C-K&gt;+&lt;C-U&gt;取消注释</span><br><span class="line">// &lt;C-A&gt;表示 control+A 同时按下</span><br><span class="line">可能因为VS中快捷键过多，需要前导快捷键。保持control按下，然后按一下第一个字母，再按一下第二个字母，松开control键。</span><br><span class="line"></span><br><span class="line">前导快捷键有&lt;C-K&gt;，&lt;C-R&gt;，&lt;C-0&gt;，&lt;C-M&gt;。&lt;C-K&gt;一般用在编辑文本快捷键之前，&lt;C-R&gt;一般用在 测试功能的快捷键之前,&lt;C-0&gt;一般用在团队功能之前,&lt;C-M&gt;用于大纲显示的相关设置。</span><br></pre></td></tr></tbody></table></figure><blockquote><p>可以 参考VSCode快捷键的分析和助记（Windows）<a href="https://zhuanlan.zhihu.com/p/66826924">https://zhuanlan.zhihu.com/p/66826924</a></p></blockquote><p>Intellisense智能感知可以进行代码提示。如果要主动调出代码提示，使用以下快捷键：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;C-J&gt;或者&lt;A-右箭头&gt;  //智能补全</span><br><span class="line">C+S+Space //查看函数参数</span><br><span class="line">&lt;C-K&gt;+&lt;C-I&gt; //查看具体信息</span><br><span class="line">&lt;C-K&gt;+&lt;C-S&gt; //外侧代码片段</span><br><span class="line">&lt;C-K&gt;+&lt;C-X&gt; //代码片段</span><br></pre></td></tr></tbody></table></figure><p>外侧代码片段与代码片段功能</p><blockquote><p><a href="https://docs.microsoft.com/zh-cn/visualstudio/ide/code-snippets?view=vs-2019">https://docs.microsoft.com/zh-cn/visualstudio/ide/code-snippets?view=vs-2019</a></p><p>代码片段是小块可重用代码，可通过右键单击菜单（关联菜单）命令或热键组合插入到代码文件中。 代码片段通常包含常用的代码块（如 <code>try-finally</code> 或 <code>if-else</code> 块），可用于插入整个类或方法。</p></blockquote><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130185257275.png" alt="image-20210130185257275"></p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130185311445.png" alt="image-20210130185311445"></p><p>可自动生成类及其构造函数和析构函数。</p><p>外侧代码片段用来包裹代码，顾名思义，外侧代码。</p><h1 id="vs的重构功能"><a href="#vs的重构功能" class="headerlink" title="vs的重构功能"></a>vs的重构功能</h1><p>&lt;C-.&gt;快捷键，快速操作和重构</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130190114633.png" alt="image-20210130190114633"></p><p>重命名：对变量、函数等进行批量重命名</p><p>速览定义：</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130190200646.png" alt="image-20210130190200646"></p><p>调出一个临时窗口，查看定义</p><p>转到定义：</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130190251384.png" alt="image-20210130190251384"></p><p>打开一个新标签，查看定义</p><p>转到声明：</p><p>查找所有引用：显示解决方案中，该变量出现位置</p><p>查看调用层次结构：函数调用关系</p><p>速览头文件/代码文件</p><p>转到头文件/代码文件</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130191029493.png" alt="image-20210130191029493"></p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130191100416.png" alt="image-20210130191100416"></p><p>查看文件中函数、变量 结构</p><blockquote><p>vs中类型图标含义</p><p><a href="https://www.cnblogs.com/zhjason/articles/14044190.html">https://www.cnblogs.com/zhjason/articles/14044190.html</a></p></blockquote><h1 id="Visual-Studio中已更改行的颜色"><a href="#Visual-Studio中已更改行的颜色" class="headerlink" title="Visual Studio中已更改行的颜色"></a>Visual Studio中已更改行的颜色</h1><p>左侧是当前页面，右侧是总页面</p><blockquote><p> <a href="https://visualstudiomagazine.com/blogs/tool-tracker/2018/04/what-the-colors-mean.aspx">https://visualstudiomagazine.com/blogs/tool-tracker/2018/04/what-the-colors-mean.aspx</a></p><p>Here’s your quick reference to the colors and icons in the editor window’s right-hand margin:</p><ul><li>Yellow: The line has been changed but not yet saved</li><li>Green: The line has been changed and saved</li><li>Orange: The line has been changed, saved, and the change undone</li><li>Little square dots in the middle of the margin: Break points</li><li>Little square dot on the right side of the margin: Syntax error</li><li>Gray block: The portion of the file that’s currently being displayed</li><li>Solid blue line: The current position of the cursor</li><li>黄色：该行已更改，但尚未保存</li><li>绿色：该行已更改并保存</li><li>橙色：该行已被更改，保存，并且更改被撤消</li><li>边距中间的小方形点：断点</li><li>边距右侧的小方形点：语法错误</li><li>灰色块：文件中当前显示的部分</li><li>蓝色实线：光标的当前位置</li></ul></blockquote><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130192345882.png" alt="image-20210130192345882"></p><p>右侧又分类三个部分。左边表示修改状态，中间是插入断点，右边是代码提示。</p><p>横线表示当前代码位置</p><h1 id="代码颜色"><a href="#代码颜色" class="headerlink" title="代码颜色"></a>代码颜色</h1><p>建议只使用一种代码高亮风格，并一直坚持下去。本人使用的是VS自带的深色主题，这样在不同的电脑上也能保持一致的编程习惯。</p><p>我没有找到深色主题代码颜色的相关资料。</p><p>下面，列举一部分常见的颜色含义：</p><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130193412025.png" alt="image-20210130193412025"></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>海洋绿</td><td>Ocean Green</td><td>类</td></tr><tr><td>蓝色</td><td>Boston Blue</td><td>类型</td></tr><tr><td>树苗黄</td><td>saplings</td><td>类成员函数</td></tr><tr><td>沙拉绿</td><td>Fruit Salad</td><td>注释</td></tr><tr><td>天蓝色</td><td></td><td>局部变量</td></tr><tr><td>白色</td><td></td><td>指针</td></tr><tr><td>威士忌色</td><td>Whiskey</td><td>字符串</td></tr><tr><td>紫罗兰色</td><td>Violet Blue</td><td>宏</td></tr></tbody></table><h1 id="开发者命令行"><a href="#开发者命令行" class="headerlink" title="开发者命令行"></a>开发者命令行</h1><p><img src="/2021-01-30-Visual%20Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/image-20210130193010925.png" alt="image-20210130193010925"></p><p>一个是cmd，另一个是powershell。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍一些VS中的常用功能及常用设置&lt;/p&gt;</summary>
    
    
    
    <category term="小文" scheme="https://raincccz.github.io/categories/%E5%B0%8F%E6%96%87/"/>
    
    
    <category term="git" scheme="https://raincccz.github.io/tags/git/"/>
    
    <category term="vs" scheme="https://raincccz.github.io/tags/vs/"/>
    
  </entry>
  
  <entry>
    <title>查询技术性资料的一些经验</title>
    <link href="https://raincccz.github.io/2021-01-30-%E6%9F%A5%E8%AF%A2%E6%8A%80%E6%9C%AF%E6%80%A7%E8%B5%84%E6%96%99%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/"/>
    <id>https://raincccz.github.io/2021-01-30-%E6%9F%A5%E8%AF%A2%E6%8A%80%E6%9C%AF%E6%80%A7%E8%B5%84%E6%96%99%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/</id>
    <published>2021-01-30T07:30:32.000Z</published>
    <updated>2021-02-01T14:49:26.779Z</updated>
    
    <content type="html"><![CDATA[<p>官方参考文档具有权威性，内容及时更新，但内容往往过于专业，文章较冗长。私人博客内容比较精炼，通俗易懂，一般只涉及常用的知识，但内容不会及时更新，且可能会存在一些错误。在初步学习时，可参考私人博客内容，遇到有争议性的问题时，查阅官方参考文档。</p><a id="more"></a><h2 id="个人查询文档的一些经验："><a href="#个人查询文档的一些经验：" class="headerlink" title="个人查询文档的一些经验："></a>个人查询文档的一些经验：</h2><p>文档类型主要有：</p><ul><li><p>官方参考文档</p></li><li><p>私人博客</p></li></ul><p>官方参考文档具有权威性，内容及时更新，但内容往往过于专业，文章较冗长。</p><p>私人博客内容比较精炼，通俗易懂，一般只涉及常用的知识，但内容不会及时更新，且可能会存在一些错误。</p><p>总结：在初步学习时，可参考私人博客内容，遇到有争议性的问题时，查阅官方参考文档。</p><h2 id="配置环境的一些经验"><a href="#配置环境的一些经验" class="headerlink" title="配置环境的一些经验"></a>配置环境的一些经验</h2><p>配置环境时，可能会参考官方参考文档或者参考私人博客。参考私人博客需要注意一下几点：</p><ol><li>注意博文的撰写时间，可能博文使用的软件版本是v2.9，当前最新版本是v3.1，主版本号发生变化，某些功能可能不兼容，导致搭建环境失败。</li><li>一个搜索小技巧，使用百度搜索引擎时，单击搜索工具选项，可以设置检索的时间范围。</li><li>配置环境时，要记录所使用软件的版本。在日后重新搭建环境时，记录搭建版本。</li><li>参考官方文档也是一个不错的选择。有些情况下，官方文档在搜索引擎中的权重可能不高。这时，可直接打开所要安装软件的官方网站。</li></ol><p>如要配置opencv环境，可打开<a href="https://opencv.org/">https://opencv.org/</a></p><p><img src="/2021-01-30-%E6%9F%A5%E8%AF%A2%E6%8A%80%E6%9C%AF%E6%80%A7%E8%B5%84%E6%96%99%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/image-20210130181327581.png" alt="image-20210130181327581"></p><p>这是opencv的官网</p><p><img src="/2021-01-30-%E6%9F%A5%E8%AF%A2%E6%8A%80%E6%9C%AF%E6%80%A7%E8%B5%84%E6%96%99%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/image-20210130181456550.png" alt="image-20210130181456550"></p><p>在网站下方，可看到如下界面。</p><ul><li>Online documention（在开发时作为参考手册使用）</li><li>Tutorials（入门时可以查看此文档）</li><li>Wiki（位于github的wiki）</li></ul><p>要安装opencv，可以先打开Tutorials页面</p><p><img src="/2021-01-30-%E6%9F%A5%E8%AF%A2%E6%8A%80%E6%9C%AF%E6%80%A7%E8%B5%84%E6%96%99%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/image-20210130183142836.png" alt="image-20210130183142836"></p><p>这是Tutorials页面，在页面上方有版本选项卡</p><p>点击Introduction to Opencv</p><p><img src="/2021-01-30-%E6%9F%A5%E8%AF%A2%E6%8A%80%E6%9C%AF%E6%80%A7%E8%B5%84%E6%96%99%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/image-20210130183322428.png" alt="image-20210130183322428"></p><p>可以看到，针对Linux，Windows，Java &amp; Android，均有安装教程，而且可以查看不同版本的教程。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;官方参考文档具有权威性，内容及时更新，但内容往往过于专业，文章较冗长。私人博客内容比较精炼，通俗易懂，一般只涉及常用的知识，但内容不会及时更新，且可能会存在一些错误。在初步学习时，可参考私人博客内容，遇到有争议性的问题时，查阅官方参考文档。&lt;/p&gt;</summary>
    
    
    
    <category term="小文" scheme="https://raincccz.github.io/categories/%E5%B0%8F%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>VS中git介绍</title>
    <link href="https://raincccz.github.io/2021-01-30-2021-01-29-VS%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/"/>
    <id>https://raincccz.github.io/2021-01-30-2021-01-29-VS%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-29T16:00:00.000Z</published>
    <updated>2021-02-01T14:49:26.755Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅介绍基本使用方法，详尽内容请参考官方文档。</p><a id="more"></a><h2 id="状态栏的中git"><a href="#状态栏的中git" class="headerlink" title="状态栏的中git"></a>状态栏的中git</h2><p>这是状态栏的选项卡，可快速查看分支状态。箭头图标表示本地仓库和远程仓库的差异，铅笔图标表示本地修改文件的数量。git图标表示git仓库名称。分叉图标表示当前分支的名称。</p><p><img src="/2021-01-30-2021-01-29-VS%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130154939843.png" alt="image-20210130154939843"></p><p>在状态栏的选项卡中点击分支名称，切换分支。</p><h2 id="打开资源管理器窗口"><a href="#打开资源管理器窗口" class="headerlink" title="打开资源管理器窗口"></a>打开资源管理器窗口</h2><p>视图-&gt;团队资源管理器 打开团队资源管理器窗口</p><p><img src="/2021-01-30-2021-01-29-VS%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130154850160.png" alt="image-20210130154850160"></p><h2 id="团队资源管理器界面"><a href="#团队资源管理器界面" class="headerlink" title="团队资源管理器界面"></a>团队资源管理器界面</h2><p><img src="/2021-01-30-2021-01-29-VS%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130154921109.png" alt="image-20210130154921109"></p><ul><li>更改<ul><li><img src="/2021-01-30-2021-01-29-VS%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130155653501.png" alt="image-20210130155653501"></li></ul></li></ul><p>更改数表示发生变动的文件，暂存更改表示文件发生变动后使用git add命令添加到了index（也称为stage、index，暂存区）</p><p>储藏 git stash</p><ul><li>分支</li><li><img src="/2021-01-30-2021-01-29-VS%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130161948207.png" alt="image-20210130161948207"></li><li>分支的右键菜单</li></ul><p><img src="/2021-01-30-2021-01-29-VS%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130162002935.png" alt="image-20210130162002935"></p><p>签出checkout，切换分支</p><p>新建分支位置 git branch 基于当前commit，新建分支</p><p>合并自 git merge</p><p>变基到 git rebase</p><p>重置 git revert [–mixed | – hard]  –hard选项会丢失当前的更改</p><p>挑拣 git cherry-pick</p><h2 id="历史记录页面"><a href="#历史记录页面" class="headerlink" title="历史记录页面"></a>历史记录页面</h2><p><img src="/2021-01-30-2021-01-29-VS%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130163330434.png" alt="image-20210130163330434"></p><p>仅显示当前分支</p><p><img src="/2021-01-30-2021-01-29-VS%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130163413867.png" alt="image-20210130163413867"></p><p>在某个commit上，打开右键菜单，</p>]]></content>
    
    
    <summary type="html">本文仅介绍基本使用方法，详尽内容请参考官方文档。</summary>
    
    
    
    <category term="小文" scheme="https://raincccz.github.io/categories/%E5%B0%8F%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>TortoiseGit介绍</title>
    <link href="https://raincccz.github.io/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/"/>
    <id>https://raincccz.github.io/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-29T16:00:00.000Z</published>
    <updated>2021-02-01T14:49:26.755Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容非常基础，记录笔者学习过程。若要详尽学习TortoiseGit，请查看<a href="https://tortoisegit.org/docs/tortoisegit/">官方文档</a>。</p><a id="more"></a><h2 id="学习指导"><a href="#学习指导" class="headerlink" title="学习指导"></a>学习指导</h2><p>要从底层理解Git工作原理，将高层指令细分了若干低层操作。Git指令过多，且指令效果复杂，如果把Git当作黑箱，则有些功能难以理解。从Git的基本工作原理入手 </p><h2 id="基本窗口"><a href="#基本窗口" class="headerlink" title="基本窗口"></a>基本窗口</h2><ul><li>log messages窗口（log）</li><li>reflog窗口（reflog）</li><li>browse references窗口（浏览引用，简单来说就是查看分支</li><li>revision graph窗口（简单来说就是分支图</li><li>repo browser窗口</li><li>commit 窗口</li><li>sync窗口</li></ul><h2 id="log-messages窗口"><a href="#log-messages窗口" class="headerlink" title="log messages窗口"></a>log messages窗口</h2><p>资源管理器右键菜单，show log。该窗口相当于git log命令（git log命令是从object中查找信息，git reflog命令是查找logs）</p><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/image-20210130144756637.png" alt="image-20210130144756637"></p><p>点击左上角蓝色下划线区域，进入browse references窗口，切换分支</p><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/20210127221613727.png" alt="在这里插入图片描述"><br>分别表示：文件修改 文件增加 文件删除 文件重命名  </p><h3 id="log-graph讲解"><a href="#log-graph讲解" class="headerlink" title="log graph讲解"></a>log graph讲解</h3><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/image-20210130151517722.png" alt="image-20210130151517722"></p><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/image-20210130151744861.png" alt="image-20210130151744861"></p><p>图中节点：方形，圆形（方形可能是表示发生了分叉。颜色：黑色，红色，绿色。不同颜色的节点连接线是过渡色。</p><blockquote><p>在stackoverflow查询 方形圆形含义</p><p><a href="https://stackoverflow.com/questions/45880591/what-is-the-meaning-of-square-icons-on-branch-lines-in-tortoisegit-log-graph">https://stackoverflow.com/questions/45880591/what-is-the-meaning-of-square-icons-on-branch-lines-in-tortoisegit-log-graph</a></p><p>In the graph line there are two types of shapes:</p><p>The circles indicate normal commits w/o any branching.</p><p>The squares indicate merges and branchings. In the first case these are merge commits (i.e., a commit with more than one parent) and in the latter case these are also normal commits. A square was chosen here to indicate that a branch goes off.</p><p>The colors of the lines (and of the shapes) are just there to make the graph better readable (i.e., to see to which branch they belong) and are configurable: <a href="https://tortoisegit.org/docs/tortoisegit/tgit-dug-settings.html#tgit-dug-settings-colours3">https://tortoisegit.org/docs/tortoisegit/tgit-dug-settings.html#tgit-dug-settings-colours3</a></p><p>圆圈表示没有任何分支的正常提交。</p><p>正方形表示合并和分支。在第一种情况下，这些是合并提交（即，具有多个父项的提交），在后一种情况下，它们也是普通的提交。在这里选择一个正方形来表示分支断开。</p></blockquote><p>方形的含义</p><ol><li>合并提交，该节点具有多个父项。</li><li>普通提交，但具有多个子项</li></ol><h2 id="Reflog窗口"><a href="#Reflog窗口" class="headerlink" title="Reflog窗口"></a>Reflog窗口</h2><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/image-20210130145538728.png" alt="image-20210130145538728"></p><p>显示Ref日志</p><h2 id="browse-references窗口"><a href="#browse-references窗口" class="headerlink" title="browse references窗口"></a>browse references窗口</h2><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/image-20210130145107546.png" alt="image-20210130145107546"></p><p>注：HEAD与heads不同。</p><p>下图为不同Ref</p><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/image-20210130145427299.png" alt="image-20210130145427299"></p><h2 id="revision-graph窗口"><a href="#revision-graph窗口" class="headerlink" title="revision graph窗口"></a>revision graph窗口</h2><p>注：revision version两个单词不要混淆</p><p>默认显示</p><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/image-20210130145910156.png" alt="image-20210130145910156"></p><p>在view选项卡中选中</p><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/image-20210130145933808.png" alt="image-20210130145933808"></p><p>这样更易于阅读</p><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/image-20210130150105708.png" alt="image-20210130150105708"></p><p>黄色表示tag，绿色表示分支，红色表示HEAD所指向的分支，浅灰色表示commit（只显示了与与分支）。</p><h2 id="repo-browser窗口"><a href="#repo-browser窗口" class="headerlink" title="repo browser窗口"></a>repo browser窗口</h2><p>直接在当前窗口查看不同commit的内容，不需要变动Working-Tree。</p><h2 id="Commit-窗口"><a href="#Commit-窗口" class="headerlink" title="Commit 窗口"></a>Commit 窗口</h2><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/8.jpg" alt="在这里插入图片描述"></p><p><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/2021012721065440.png" alt="在这里插入图片描述">  </p><p>这里ReCommit表示完成此次提交后不关闭当前窗口，可进行下一次提交。（与amend last commit不同）<br><img src="/2021-01-30-TortoiseGit%E4%BB%8B%E7%BB%8D/20210127210814143.png" alt="在这里插入图片描述"><br>Set author<br>Set author date 在Message中添加作者和日期。<br>Amend Last Commit （git commit –amend 修改上次提交）  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文内容非常基础，记录笔者学习过程。若要详尽学习TortoiseGit，请查看&lt;a href=&quot;https://tortoisegit.org/docs/tortoisegit/&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="小文" scheme="https://raincccz.github.io/categories/%E5%B0%8F%E6%96%87/"/>
    
    
    <category term="TortoiseGit" scheme="https://raincccz.github.io/tags/TortoiseGit/"/>
    
    <category term="git" scheme="https://raincccz.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>命令行中git log图介绍</title>
    <link href="https://raincccz.github.io/2021-01-30-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/"/>
    <id>https://raincccz.github.io/2021-01-30-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-29T16:00:00.000Z</published>
    <updated>2021-02-01T14:49:26.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令行中git-log图介绍"><a href="#命令行中git-log图介绍" class="headerlink" title="命令行中git log图介绍"></a>命令行中git log图介绍</h1><p>写在前面：使用git时，一直看不懂log图，现在将从最基本的提交开始，了解git log图。本文内容十分基础</p><a id="more"></a><h2 id="如何阅读git-log图（十分基础）"><a href="#如何阅读git-log图（十分基础）" class="headerlink" title="如何阅读git log图（十分基础）"></a>如何阅读git log图（十分基础）</h2><p>查看日志</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline --graph //可以使用alias gl=...</span><br></pre></td></tr></tbody></table></figure><p>进行第一次提交，然后查看日志</p><p><img src="/2021-01-30-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/Snipaste_2021-01-30_13-34-22.png"></p><p>进行第二次提交</p><p><img src="/2021-01-30-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130134246367.png" alt="image-20210130134246367"></p><p>创建develop分支，进行一次提交</p><p><img src="/2021-01-30-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130134823778.png" alt="image-20210130134823778"></p><p>从图中可以看出，共有三次提交。最新的提交显示在最上方。在first commit后产生了分叉。（git本身并没有主次分支的区分，数据以object的方式保存，分支指针指向某个object）</p><p>再进行多次提交</p><p><img src="/2021-01-30-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130135129027.png" alt="image-20210130135129027"></p><p>从图中可以看出，HEAD指向develop分支，develop有多次提交，这里“线性提交”没有使用竖线、斜线表示。</p><p>创建new_branch分支，进行一次提交</p><p><img src="/2021-01-30-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130135445416.png" alt="image-20210130135445416"></p><p>从图中可以看出，HEAD指向new_branch分支，new_branch分支只有两次提交。一个星号表示一次提交，连线表示提交之间的关系，如果是“线性提交”，则省略连线。</p><p>又对分支做了修改</p><p><img src="/2021-01-30-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130140224010.png" alt="image-20210130140224010"></p><p>连线颜色更换，在stack overflow上查询颜色更换的原因。</p><blockquote><p><a href="https://stackoverflow.com/questions/40675151/what-do-line-colors-in-git-log-graph-mean">https://stackoverflow.com/questions/40675151/what-do-line-colors-in-git-log-graph-mean</a></p><p>The colors are merely meant to help you view the lines as distinct from other lines. To answer question #1, they are assigned not pseudo-randomly, but rather <em>sequentially</em>, each time <code>git log --graph</code> picks a new “column number”. Unfortunately there are two issues I know of. Both tie into your question #2.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GIT_COLOR_RED,</span><br><span class="line">GIT_COLOR_GREEN,</span><br><span class="line">GIT_COLOR_YELLOW,</span><br><span class="line">GIT_COLOR_BLUE,</span><br><span class="line">GIT_COLOR_MAGENTA,</span><br><span class="line">GIT_COLOR_CYAN,</span><br><span class="line">GIT_COLOR_BOLD_RED,</span><br><span class="line">GIT_COLOR_BOLD_GREEN,</span><br><span class="line">GIT_COLOR_BOLD_YELLOW,</span><br><span class="line">GIT_COLOR_BOLD_BLUE,</span><br><span class="line">GIT_COLOR_BOLD_MAGENTA,</span><br><span class="line">GIT_COLOR_BOLD_CYAN,</span><br></pre></td></tr></tbody></table></figure></blockquote><p>连线颜色只是为了区分开不同线条，颜色按顺序分配。</p><p><img src="/2021-01-30-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%ADgit%E4%BB%8B%E7%BB%8D/image-20210130142953917.png" alt="image-20210130142953917"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;命令行中git-log图介绍&quot;&gt;&lt;a href=&quot;#命令行中git-log图介绍&quot; class=&quot;headerlink&quot; title=&quot;命令行中git log图介绍&quot;&gt;&lt;/a&gt;命令行中git log图介绍&lt;/h1&gt;&lt;p&gt;写在前面：使用git时，一直看不懂log图，现在将从最基本的提交开始，了解git log图。本文内容十分基础&lt;/p&gt;</summary>
    
    
    
    <category term="小文" scheme="https://raincccz.github.io/categories/%E5%B0%8F%E6%96%87/"/>
    
    
    <category term="git" scheme="https://raincccz.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令介绍及TortoiseGit、VS中git的使用</title>
    <link href="https://raincccz.github.io/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://raincccz.github.io/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-29T07:30:32.000Z</published>
    <updated>2021-02-01T14:49:26.759Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍git的原理以及基本指令的使用，使读者理解git的工作方式。最后将介绍如何在TortoiseGit和Visual Studio使用git。</p><a id="more"></a><p>标准用法请参考<a href="https://git-scm.com/book/zh">git-scm</a>和man手册。本文记录笔者对git的一些理解，如有错误，欢迎指正。  </p><p>引用内容已用markdown记号标出。版权所有，转载请注明出处。  </p><p>First Edition：2021-01-27<br>第二次编辑：2021-01-29</p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文将介绍git的原理以及基本指令的使用，使读者理解git的工作方式。最后将介绍如何在TortoiseGit和Visual Studio使用git。</p><h1 id="文中的记号约定"><a href="#文中的记号约定" class="headerlink" title="文中的记号约定"></a>文中的记号约定</h1><p><code>&lt;当前分支&gt;</code>：用尖括号包裹，需要被替换  </p><p>引用内容</p><blockquote><p> 这是引用内容  </p></blockquote><h1 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h1><p>基于windows平台，命令行，TortoiseGit，Visual Studio中git的使用  </p><h1 id="写作注意"><a href="#写作注意" class="headerlink" title="写作注意"></a>写作注意</h1><p>本文章使用markdown编辑器Typora完成。下面将介绍笔者遇到的一些问题。</p><ol><li>不同区块之间需要显式空行</li><li>不要以html中的特殊记号开头，如”&lt;”，可能会出现排版故障等情况</li><li>markdown段内换行兼容性不佳。避免使用段内换行。文章以段排版，段与段之间需要显示空行。</li><li>无序列表、有序列表不需要考虑空行问题，系统自动处理。（可以这样理解，markdwon是一种轻量的标记语言，使用标记的目的是为了让软件处理，同时也使得源代码有一定的可读性。需要标记出当前内容的格式，如段内换行、换段、列表。具体的显示效果有css文件控制。</li><li>图片路径约定，建立img文件夹保存图片，使用相对路径</li></ol><h1 id="git-指引"><a href="#git-指引" class="headerlink" title="git 指引"></a>git 指引</h1><p>学习过程中，先学习在命令行环境下使用git，理解基本原理。熟练后再使用gui工具。</p><h1 id="git重要概念（可以先跳过本部分）"><a href="#git重要概念（可以先跳过本部分）" class="headerlink" title="git重要概念（可以先跳过本部分）"></a>git重要概念（可以先跳过本部分）</h1><p>更适合把git当作某种数据结构来理解，从底层理解git 。</p><p>git分支并不是一个实体，而是一个指针，指向某个commit，不保存其他信息。</p><p>HEAD表示当前指向的位置，maste一般用于主分支。不要混淆两者概念  </p><p>三个抽象的工作区域</p><ol><li>Working-Tree</li><li> Index</li><li> Repo</li></ol><p>Working-Tree为工作目录，即为用户可以直接操作的文件。</p><p>index，暂存区，也称stage（文件被git add之后，将blob object保存到./git/objects文件夹下，同时向index文件中写入相关信息。</p><p>Repo，版本仓库（git commit后，index保存为tree object，并添加commit object）</p><h1 id="git-指令"><a href="#git-指令" class="headerlink" title="git 指令"></a>git 指令</h1><p>将介绍常用指令（均需要掌握）</p><p>学习指令时，要使用完整指令，不要依赖默认行为。要了解指令的具体效果</p><h2 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h2><ol><li>git add</li><li>git commit</li><li>git checkout</li><li>git branch</li><li>git switch </li></ol><h3 id="1-git-add"><a href="#1-git-add" class="headerlink" title="1.git add"></a>1.git add</h3><ul><li><p>add 添加文件到index  </p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add <span class="keyword">new</span>.txt  </span><br></pre></td></tr></tbody></table></figure><h3 id="2-git-commit"><a href="#2-git-commit" class="headerlink" title="2.git commit"></a>2.git commit</h3></li><li><p>commit 将当前index提交到Local Repository  </p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git  commit  -m <span class="string">"&lt;这里是commit的注释&gt;"</span>  </span><br><span class="line">git  commit  -m <span class="string">"&lt;这里是commit的注释&gt;"</span> --allow-empty <span class="comment">//使用此命令学习git分支  </span></span><br><span class="line">git  commit  -m <span class="string">"&lt;这里是commit的注释&gt;"</span> --allow-empty-message -m <span class="string">""</span> <span class="comment">//允许空注释  </span></span><br></pre></td></tr></tbody></table></figure><p>git commit将当前index状态保存，即git commit不直接与工作目录交互</p></li></ul><h3 id="3-git-checkout（checkout命令更接近底层）"><a href="#3-git-checkout（checkout命令更接近底层）" class="headerlink" title="3.git checkout（checkout命令更接近底层）"></a>3.git checkout（checkout命令更接近底层）</h3><ul><li><p>checkout 修改HEAD指针 底层修改 ./git/HEAD  </p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;指定位置&gt; <span class="comment">//修改HEAD 指针到&lt;指定位置&gt;  </span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-git-branch"><a href="#4-git-branch" class="headerlink" title="4.git branch"></a>4.git branch</h3></li><li><p>branch 创建分支  </p></li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch new_branch <span class="comment">//新建分支new_branch  </span></span><br><span class="line">git branch -a 显示所有分支</span><br><span class="line">git branch -r 查看远程分支名</span><br><span class="line">git branch --<span class="built_in">set</span>-upstream 本地分支名 &lt;远程主机名&gt;/&lt;远程分支名&gt; <span class="comment">//数据流向，从本地流向远程，从左向右</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-git-switch"><a href="#5-git-switch" class="headerlink" title="5.git switch"></a>5.git switch</h3><ul><li>switch 修改HEAD指针，使其指向某个分支而不是某个结点  <figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">switch</span> &lt;分支&gt; <span class="comment">//切换到某个分支  </span></span><br><span class="line"><span class="comment">//switch与checkout的区别：  </span></span><br><span class="line"><span class="comment">//checkout功能更加底层，修改HEAD指针的内容，使其指向branch或者commit  </span></span><br><span class="line"><span class="comment">//switch只能指向分支  </span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="git进阶指令"><a href="#git进阶指令" class="headerlink" title="git进阶指令"></a>git进阶指令</h2><ol><li>git merge</li><li>git reset</li><li>git revert</li><li>git rebase  </li><li>git cherry-pick  </li><li>git stash</li></ol><h3 id="1-git-merge"><a href="#1-git-merge" class="headerlink" title="1.git merge"></a>1.git merge</h3><p>这里的操作会判断是否发生冲突</p><blockquote><p>完整内容请参考 <a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6">git-scm</a></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Commit1---Commit2</span><br><span class="line">       \--Commit3</span><br><span class="line">master-&gt;Commit1</span><br><span class="line">hotfix-&gt;Commit2</span><br><span class="line">issue-&gt;Commit3</span><br><span class="line">HEAD-&gt;master</span><br><span class="line"></span><br><span class="line">注：git中分支本质是指针，指针指向某个节点，这个节点及其所有的祖先节点构成了该分支内容。如C1&lt;-C2&lt;-C3（箭头方向与指针方向一致，这个表示法在其他位置还会用到）。master分支指向C2节点，C1与C2属于master分支，C3不属于master分支。不能认为与master分支上节点关联的内容就属于master分支（单向链表）</span><br><span class="line"></span><br><span class="line">git switch master</span><br><span class="line">//将hotfix分支内容合并到master分支</span><br><span class="line"></span><br><span class="line">git merge hotfix //快进（fast-forward）</span><br><span class="line">//将issue分支内容合并到master分支</span><br><span class="line">git merge issue //三方合并</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>当前工作再branch_master分支，此分支指向commitA，develop分支指向commitB,(AB字母仅供标识，没有其他含义）。使用指令<code>git merge develop</code>,创建一个新的commitC，commitC以commitA和commitB为父结点。再次强调，git的分支是一个指针，存放在./git/refs文件夹下。分支所包含的结点是以类似链表的方式的进行查找的，并不是线性记录在某个文件中。  </p><p>merge的两种方式</p><ul><li>快进（fast forward）</li><li>三方合并</li></ul><p>快进：简单的将指针向前推进，即只修改指针内容</p><p>三方合并：</p><blockquote><p>Git 会使用两个分支的末端所指的快照（<code>C2 和 </code>C3<code>）以及这两个分支的公共祖先（</code>C1`），做一个简单的三方合并。</p></blockquote><p>三方合并过程不影响C2、C3，而是新建一个C4节点，C4节点的父节点为C2、C3。</p><h3 id="2-git-reset"><a href="#2-git-reset" class="headerlink" title="2.git reset"></a>2.git reset</h3><ul><li>reset 修改当前分支的指针 底层修改文件 ./git/refs/head/&lt;分支名&gt;  </li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset ad13f1 <span class="comment">//修改当前分支的指针  </span></span><br><span class="line"><span class="comment">//git reset与checkout的区别  </span></span><br><span class="line"><span class="comment">//git reset不修改HEAD指针，修改当前分支指向的commit  </span></span><br><span class="line"><span class="comment">//git checkout修改HEAD指针  </span></span><br></pre></td></tr></tbody></table></figure><p>git中删除分支并不会直接删除commit object，不过分支指针丢失了，难以进行查找，并且git有gc垃圾回收机制，会清理悬挂对象。（git误操作后恢复数据原理，分支指针被清除，对象并未清除，而且在./git/logs文件夹内有日志。) git fsck 命令验证数据库中对象的连通性和有效性。  </p><p>修改当前分支指向的结点（分支指针总是指向该分支的最后一个结点，或者说分支指针记录了该分支最后一个结点，checkout命令是移动HEAD指针）  </p><p>当前master分支有commitA commitB commitC  </p><p>git reset commitA后，如果没有分支线包含commitB，commitC，那么B、C不会显示在git log中（因为git log是动态搜索），B、C可能会被清除。  </p><p>注：git使用链接式的数据结构。 </p><h3 id="3-git-revert（创建新节点）"><a href="#3-git-revert（创建新节点）" class="headerlink" title="3. git revert（创建新节点）"></a>3. git revert（创建新节点）</h3><p>当前master分支有commitA commitB commitC  </p><p>使用git revert commitA命令生成commitD，commitD的父节点为commitC，commitD的内容与A一致，但并不破坏历史记录.  </p><p>注：git对象是以链表的形式组织。链表上的结点不能自由移动，但可以对读取结点上的内容，创建新结点，这看起来像是回到了某次提交。  </p><p>git cherry-pick命令  </p><h3 id="4-git-rebase"><a href="#4-git-rebase" class="headerlink" title="4.git rebase"></a>4.git rebase</h3><p>这里的操作会判断是否发生冲突</p><p>在git merge后，如果是三方合并，历史时间线中会显示分叉（如图）</p><p><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/Snipaste_2021-01-29_17-43-24.png"></p><p>这时可以使用rebase命令，</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;basebranch&gt; &lt;topicbranch&gt; 将topic分支的修改应用到base分支</span><br><span class="line">git rebase &lt;basebranch&gt; 将当前分支的修改应用到base分支上</span><br></pre></td></tr></tbody></table></figure><p>注意：</p><ol><li>不要混淆topic分支和base分支</li><li>应该在临时分支使用rebase命令，rebase master，将当前分支的内容应用到master分支上。</li><li>这与merge命令的使用方式有所不同。在master分支上使用merge命令，在临时分支上使用rebase命令。（在当前分支使用的命令一般情况总是影响当前分支）</li></ol><h3 id="5-git-cherry-pick"><a href="#5-git-cherry-pick" class="headerlink" title="5.git cherry-pick"></a>5.git cherry-pick</h3><p>Apply the changes introduced by some existing commits 应用一些现有提交引入的更改</p><p>merge rebase cherry-pick命令是基于修改，类似补丁的方式，并不是产生一份一模一样的副本。git并不会直接增量保存修改，而是产生独立的提交（具体请参考git内部原理分析），然后再不定期压缩数据库。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;commitHash&gt;</span><br><span class="line">git cherry-pick &lt;分支名&gt; //相当于使用分支的最新提交</span><br></pre></td></tr></tbody></table></figure><h3 id="6-git-stash"><a href="#6-git-stash" class="headerlink" title="6.git stash"></a>6.git stash</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash list  </span><br><span class="line">git stash show  &lt;stash&gt;</span><br><span class="line">git stash drop  &lt;stash&gt;</span><br><span class="line">git stash push [-u|--include-untracked] [-a|--all] [-k|--[no-]keep-index]</span><br><span class="line">git stash ( pop | apply ) [--index] [-q|--quiet] &lt;stash&gt; [--index]</span><br><span class="line">git stash clear</span><br></pre></td></tr></tbody></table></figure><p>-u|–include-untracked 包括未跟踪的文件</p><h2 id="git-网络指令"><a href="#git-网络指令" class="headerlink" title="git 网络指令"></a>git 网络指令</h2><ol><li><p>git clone</p></li><li><p>git fetch</p></li><li><p>git push</p></li><li><p>git pull</p></li><li><p>git remote</p></li></ol><h3 id="1-git-clone"><a href="#1-git-clone" class="headerlink" title="1.git clone"></a>1.git clone</h3><p>git-clone-将存储库克隆到新目录。下载github仓库时，使用本命令</p><blockquote><p><a href="https://manpages.debian.org/stretch/git-man/git-clone.1.en.html">https://manpages.debian.org/stretch/git-man/git-clone.1.en.html</a></p><p> <strong>DESCRIPTION</strong></p><p>Clones a repository into a newly created directory, creates remote-tracking branches for each branch in the cloned repository (visible using <strong>git branch -r</strong>), and creates and checks out an initial branch that is forked from the cloned repository’s currently active branch.</p></blockquote><p>翻译：将存储库克隆到新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支（使用<strong>git branch -r</strong>可见），并创建并签出从克隆的存储库当前活动分支派生的初始分支。</p><h3 id="2-git-fetch"><a href="#2-git-fetch" class="headerlink" title="2.git fetch"></a>2.git fetch</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;origin&lt;/&lt;remote_branch&gt;</span><br><span class="line">// &lt;origin&gt;为远程主机名 &lt;remote_branch&gt;为远程分支名</span><br></pre></td></tr></tbody></table></figure><p>git fetch之后在本地创建远程分支指针</p><p>注：这里的远程分支指针是存储在本地的一个文件，与远程仓库的分支不同。</p><p>具体原理请参考git内部原理分析</p><h3 id="3-git-push"><a href="#3-git-push" class="headerlink" title="3.git push"></a>3.git push</h3><p>git push 远程主机名 本地分支名:远程分支名</p><p>（最开始学习时，尽量不要使用简写）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程主机名origin&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; //origin是远程主机名，不要混淆远程主机名与远程分支名</span><br><span class="line">git push origin //在有绑定关系时，可省略分支名，Git现在默认推送当前分支</span><br><span class="line">git push 如果只有一个远程主机，那么主机名也可以省略</span><br><span class="line">git push -u 指定默认主机</span><br><span class="line">git branch -</span><br></pre></td></tr></tbody></table></figure><h3 id="4-git-pull"><a href="#4-git-pull" class="headerlink" title="4.git pull"></a>4.git pull</h3><p><strong>git pull</strong> 命令用于从远程获取代码并合并本地的版本。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程主机名origin&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></tbody></table></figure><p>注意</p><ol><li>不要混淆pull与push指令，push意为推送，pull意为拉取。</li><li>不建议使用git pull指令。应用git fetch与git merge指令替代</li><li>git push git pull指令中  分支流向为从左向右，左边分支数据流向右边分支</li></ol><h3 id="5-git-remote"><a href="#5-git-remote" class="headerlink" title="5.git remote"></a>5.git remote</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v //显示本地关联的远程仓库</span><br><span class="line">git remote add &lt;shortname&gt; &lt;url&gt; //shortname记为origin</span><br></pre></td></tr></tbody></table></figure><h1 id="git代码区域"><a href="#git代码区域" class="headerlink" title="git代码区域"></a>git代码区域</h1><p>这几个区域是使用概念上的区别，实际存储并不完全独立。</p><ol><li>Working-Tree</li><li>Index</li><li>Local Repo</li><li>Remote Repo</li></ol><p>注意</p><ol><li><p>Working-Tree 即工作文件夹  </p></li><li><p>index index区内容，注意这里不是空的，使用git add <file1>命令，将file1添加到object和index内。<br>git commit区域 git commit将index内容打包到tree obejct，建立commit object，修改当前分支的指针，在logs文件夹内写入HEAD和当前分支的变更日志。  </file1></p></li><li><p>在git中，数据存放在以sha1为键名的数据库中，以链表方式组织数据。这样数据更加灵活。  </p></li><li><p>git reflog是保存到本地的，不保存到远程。git log是动态计算的  </p></li></ol><p>git对象 </p><ol><li>blob </li><li>tree </li><li>commit  </li></ol><p>git引用 </p><ol><li>分支引用 </li><li>HEAD引用</li><li> 标签引用</li><li> 远程引用  </li></ol><p>git本地的远程分支也仅保存指针，不保存数据。数据保存在object中。远程分支标记了commit object。（由于sha1的特点，一般地，不同的文件不会具有相同的sha1）  </p><p><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/1.jpg" alt="在这里插入图片描述"> </p><p>Git分支与数据不直接关联。  数据中文件内容和文件元信息不直接关联。  commit不和文件直接关联。  远程分支建立在本地objects上，而不是简单粗暴地下载远程文件与本地文件比对。  git fetch操作是下载远程分支所关联地object（如果有某个结点有两个父节点，那么这两个方向的结点都会被下载），然后下载远程分支指针。 </p><p>git是以节点链表为核心，不是以孤立的分支为核心。  git保证了与分支所关联的commit可以被安全保存。  patch分支修改了某项功能，随后在master分支上merge patch分支，删除patch分支。这三个节点都得到了保留。  </p><h1 id="git常用的底层命令"><a href="#git常用的底层命令" class="headerlink" title="git常用的底层命令"></a>git常用的底层命令</h1><ol><li>git hash-object 写入object  </li><li>git write-tree 将index内容写入一个树对象  </li><li> git update-index 更新index  </li><li> git cat-file [-p] [-t] [-s]（pretty-print type size 查看文件  ）</li></ol><h1 id="git-内部原理分析（参考git-scm）"><a href="#git-内部原理分析（参考git-scm）" class="headerlink" title="git 内部原理分析（参考git-scm）"></a>git 内部原理分析（参考git-scm）</h1><blockquote><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E4%B8%8E%E4%B8%8A%E5%B1%82%E5%91%BD%E4%BB%A4">https://git-scm.com/book/zh/v2/Git-内部原理-底层命令与上层命令</a>  </p></blockquote><h2 id="1-git命令"><a href="#1-git命令" class="headerlink" title="1. git命令"></a>1. git命令</h2><p>分为底层命令（plumbing），上层命令（porcelain）  </p><h2 id="2-git文件目录"><a href="#2-git文件目录" class="headerlink" title="2. git文件目录"></a>2. git文件目录</h2><blockquote><p>（注意，info/ 表示文件夹  HEAD 表示文件。根据末尾的/来区分文件和文件夹）<br><strong>config</strong>（config 文件包含项目特有的配置选项）<br><strong>description</strong>（仅供 GitWeb 程序使用）<br><strong>HEAD</strong>（HEAD指针，指向目前被检出的分支<br><strong>hooks</strong>/（包含客户端或服务端的钩子脚本）<br><strong>info/**（目录包含一个全局性排除（global exclude）文件， 用以放置那些不希望被记录在 .gitignore 文件中的忽略模式（ignored patterns）<br>**objects/**（目录存储所有数据内容）<br>**refs</strong>/（存储指向数据（分支、远程仓库和标签等）的提交对象的指针）<br><strong>index</strong>（文件保存暂存区信息）  </p></blockquote><h2 id="3-git对象"><a href="#3-git对象" class="headerlink" title="3. git对象"></a>3. git对象</h2><blockquote><ul><li>git对象（object）存放在./git/object/ 文件夹。以&lt;hash的前两位&gt;/&lt;hash的后38位&gt;的结构存储  </li><li>对象分为 数据对象（blob object），树对象（tree object），提交对象（commit object）  </li><li>数据对象仅保存了文件的内容，没有保存文件名。  <ul><li>git cat-file -p &lt;指定的sha1&gt; 从Git中取回数据（-p 表示pretty-print 自动判断类型 -t表示查看object的类型  </li><li>git hash-object -w test.txt 将test.txt写入Git  </li></ul></li><li>树对象（tree object）  <ul><li>树对象将文件组织到一起，一个树对象包含了一条或多条树对象记录。每条记录含有一个指向数据对象或者子树对象的 SHA-1 指针，以及相应的模式、类型、文件名信息    * Git 根据某一时刻暂存区（ index 区域，也称为stage区域，使用git<br>add命令后文件被添加到这里）所表示的状态创建并记录一个对应的树对象。   * 底层命令 git<br>update-index，必须为上述命令指定 –add  </li></ul></li><li>文件模式为 100644，表明这是一个普通文件。 其他选择包括：100755，表示一个可执行文件； 120000，表示一个符号链接  </li><li>git write-tree 命令将暂存区内容写入一个树对象  </li><li>提交对象（commit object）  <ul><li>调用 commit-tree 命令创建一个提交对象。为此需要指定一个树对象的 SHA-1 值，以及该提交的父提交对象（如果有的话）。  </li><li><blockquote><p>如果你做完了以上所有操作，那么现在就有了三个树对象，分别代表我们想要跟踪的不同项目快照。 然而问题依旧：若想重用这些快照，你必须记住所有三个 SHA-1 哈希值。<br>并且，你也完全不知道是谁保存了这些快照，在什么时刻保存的，以及为什么保存这些快照。 而以上这些，正是提交对象（commit<br>object）能为你保存的基本信息。  </p></blockquote></li><li>提交对象 保存tree的sha1值，作者，保存时间，提交备注  </li><li>提交对象类似于数据结构中链表的结点，保存自身信息和父节点的位置  </li></ul></li></ul></blockquote><p>总结  </p><ol><li>git blob object保存文件内容，tree object保存文件元信息以及目录信息，commit tree保存提交信息。  </li><li>此时，通过object的sha1来查找object，未对object进行标注。  </li></ol><h2 id="4-git引用（references，简写为refs）"><a href="#4-git引用（references，简写为refs）" class="headerlink" title="4.git引用（references，简写为refs）"></a>4.git引用（references，简写为refs）</h2><p>笔者注：git引用可以理解为C语言的指针，指向某个地址。引用存放在.git/refs/heads/<br>对分支进行操作时就是在操作【references】<br>如果想更新某个引用，Git 提供了一个更加安全的命令 update-ref 来完成此事：<br> Git 分支的本质：一个指向某一系列提交之首的指针或引用。  </p><h3 id="HEAD-引用"><a href="#HEAD-引用" class="headerlink" title="HEAD 引用"></a>HEAD 引用</h3><p>HEAD 文件通常是一个符号引用（symbolic reference），指向目前所在的分支。 所谓符号引用，表示它是一个指向其他引用的指针。  </p><h3 id="标签引用"><a href="#标签引用" class="headerlink" title="标签引用"></a>标签引用</h3><blockquote><p>然而实际上还有第四种。 标签对象（tag object） 非常类似于一个提交对象——它包含一个标签创建者信息、一个日期、一段注释信息，以及一个指针。 主要的区别在于，标签对象通常指向一个提交对象，而不是一个树对象。 它像是一个永不移动的分支引用——永远指向同一个提交对象，只不过给这个提交对象加上一个更友好的名字罢了。  </p></blockquote><h3 id="远程引用"><a href="#远程引用" class="headerlink" title="远程引用"></a>远程引用</h3><blockquote><p>远程引用是只读的。 虽然可以 git checkout 到某个远程引用，但是 Git 并不会将 HEAD 引用指向该远程引用。因此，你永远不能通过 commit 命令来更新远程引用。 Git 将这些远程引用作为记录远程服务器上各分支最后已知位置状态的书签来管理。  </p></blockquote><p>git对象</p><p>数据对象，树对象，提交对象</p><p>分支，HEAD引用，TAG引用，remote引用。</p><p>git中对象为基础，引用指向某些对象。</p><h1 id="git底层实验"><a href="#git底层实验" class="headerlink" title="git底层实验"></a>git底层实验</h1><ol><li>新建仓库  </li></ol><ul><li>命令行中<code>git init </code>  </li><li>TortoiseGit ,右键菜单Create repo  </li><li>vs中 (待补充）  </li></ul><ol start="2"><li>创建文件  </li></ol><ul><li>手动新建文件  </li><li>或者 echo “&lt;字符&gt;” &gt;&gt; new.txt  </li><li>或从 touch new.txt (windows下可能没有此命令）<br>打开文件，写入new conent并保存<br>注意：此时 ./.git/objects文件夹内并没有生成对应的文件<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127195401920.png" alt="在这里插入图片描述">  </li></ul><ol start="3"><li>将文件添加到index <code>git add new.txt</code><br>注意./git/objects/文件夹内变化，增加了名为47的文件夹<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127195343498.png" alt="在这里插入图片描述"><br>查看该文件夹的内容<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127195519749.png" alt="在这里插入图片描述"><br>使用git底层命令查看该文件的内容<br><code>git cat-file -p 47d2739ba2c34690248c8f91b84bb54e8936899a</code><br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/2021012719595181.png" alt="在这里插入图片描述"><br>使用同样的方法创建new.txt文件，并将其添加到index。在objects内生成了23/b6fc220420f74c5af7f34c106ef931a1fa15ea文件  </li></ol><p>注：47d2739ba2c34690248c8f91b84bb54e8936899a为内容的sha1，实际上objects文件夹为数据库，sha1与内容构成了键值对，按照&lt;前2位sha1&gt;/&lt;后38位sha1&gt;的方式存储。  </p><p>注：将文件提交到index后，new.txt文件的内容已经被保存到了数据库中。即git add的作用并不是仅对文件做标记，而是将其内容保存到数据库中。可以将其分解为底层命令git hash-object，并未保存树对象<br>4.提交index到Local Repo  </p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"First Commit"</span>  </span><br></pre></td></tr></tbody></table></figure><p><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127200438711.png" alt="在这里插入图片描述"><br>此时，查看objects文件夹的内容<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/2.jpg" alt="在这里插入图片描述"><br>新增了5d/ d4/文件夹<br>查看5d文件夹下新增文件的内容<br>使用<code>git cat-file -p &lt;sha1&gt;</code>指令查看新增objects的内容<br>使用<code>git cat-file -t</code><sha1> 指令查看新增objects的类型<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127200959354.png" alt="在这里插入图片描述"><br>查看d4文件夹下新增文件的内容<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/3.jpg" alt="在这里插入图片描述"><br>查看refs/heads文件夹<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127201353609.png" alt="在这里插入图片描述"><br>查看master文件的内容<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127201415714.png" alt="在这里插入图片描述"><br>发现其内容与新增的commit object的sha1一致。  </sha1></p><p>总结：使用git commit指令后 objects内新增两个文件，分别为tree object，commit object。refs/heads文件夹内分支指针内容被改写。  </p><ol start="5"><li>查看当前HEAD指针的内容，HEAD指针指向了master分支<br>注：HEAD 与heads不同<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127194030173.png" alt="在这里插入图片描述">  </li><li>继续测试，使用<code>git commit --allow-empty -m "empty commit"</code>指令进行一次空提交<br>注：使用windows下软件everything 可以查看新增加的文件<br>以下文件的修改时间与刚才的操作时间匹配<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/202101272019081.png" alt="在这里插入图片描述"><br>分别为：  </li></ol><ul><li>./refs/heads/master  </li><li>/logs/refs/heads/master  </li><li>/logs/HEAD  </li><li>新增的object  </li><li>COMMIT_EDITMSG （猜测，此文件可能供git comment –amend 选项使用）<br>查看master文件内容，发现其指向了新的commit object<br>logs文件夹内，有两个文件发生了变化<br>查看HEAD文件内容，记录了HEAD指针的变化，新记录增加到文件末尾。第一个sha1值表示父commit，第二个sha1表示当前的commit。第一次提交没有父commit，所以用全0的sha1值表示。<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127204038682.png" alt="在这里插入图片描述"><br>查看master文件内容，记录了master指针的变化，新记录增加到文件末尾<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127204103815.png" alt="在这里插入图片描述"><br>使用<code>git log</code>命令<br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/6.jpg" alt="在这里插入图片描述"><br>其内容与logs内文件内容相似，不过最新的提交在顶部，从新到旧。<br>使用命令<code>git reflog</code><br><img src="/2021-01-29-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%E5%8F%8ATortoiseGit%E3%80%81VS%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/20210127204745793.png" alt="在这里插入图片描述"><br>记录了HEAD指针的变化。<br>注：HEAD@{N}表示HEAD之前的值  </li></ul><p>提问：logs记录的日志是否供git使用<br>验证：将logs文件夹移动其他位置，运行git log指令和git reflog指令<br>运行git log指令，变更内容仍可输出<br>运行git reflog指令，无内容输出。<br>将logs文件夹移回，git reflog命令可正常使用<br>总结：<code>git log</code>遍历objects来建立日志，<code>git reflog</code>查询.git/logs文件夹下内容  </p><p>注：git中箭头含义，箭头表示指向该节点，不能把箭头当作时间方向  </p><h1 id="命令行中Git介绍"><a href="#命令行中Git介绍" class="headerlink" title="命令行中Git介绍"></a>命令行中Git介绍</h1><p>拆分到另一篇文章中</p><h1 id="TortoiseGit介绍"><a href="#TortoiseGit介绍" class="headerlink" title="TortoiseGit介绍"></a>TortoiseGit介绍</h1><p>拆分到另一篇文章中</p><h1 id="Visual-Studio-中git的使用"><a href="#Visual-Studio-中git的使用" class="headerlink" title="Visual Studio 中git的使用"></a>Visual Studio 中git的使用</h1><p>拆分到另一篇文章中</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://git-scm.com/book/zh/v2/">https://git-scm.com</a></li><li><a href="https://manpages.debian.org/stretch/git-man/git.1.en.html">https://manpages.debian.org/stretch/git-man/git.1.en.html</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将介绍git的原理以及基本指令的使用，使读者理解git的工作方式。最后将介绍如何在TortoiseGit和Visual Studio使用git。&lt;/p&gt;</summary>
    
    
    
    <category term="小文" scheme="https://raincccz.github.io/categories/%E5%B0%8F%E6%96%87/"/>
    
    
    <category term="git" scheme="https://raincccz.github.io/tags/git/"/>
    
  </entry>
  
</feed>
